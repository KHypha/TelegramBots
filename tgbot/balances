import telegram
import requests
from binance.client import Client
from threading import Thread
import time
import random
from binance.enums import KLINE_INTERVAL_1MINUTE

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

API_KEY = '5fyW0DEXWVCPOoCBRATcUsl44USDtBCovYCVNNv6LjBCjEwuH06W2L4Rc2YVwuUh'
API_SECRET = 'C3HhLwDM88KLJlBirAVq1Yn94cP9Qu1HRGkI2qZ5ApN4sdcF1dlvHctPvAITxJkD'


TELEGRAM_API_TOKEN = '6401564805:AAFJ34xVFl_3XrtyXWMlUoPjHiOhGTQndgk'

class BinanceBot:
    def __init__(self):
        self.updater = Updater(token=TELEGRAM_API_TOKEN, use_context=True)
        self.dp = self.updater.dispatcher
        self.client = Client(API_KEY, API_SECRET)
        self.dp.add_handler(CommandHandler("start", self.start))
        self.dp.add_handler(CommandHandler("positions", self.update_info_wrapper(self.fetch_positions, self.format_positions, "üìä Open Positions:")))
        self.dp.add_handler(CommandHandler("pnl", self.update_info_wrapper(self.fetch_positions, self.format_pnl_message, "Unrealized PnL and ROE%:")))
        self.dp.add_handler(CommandHandler("balances", self.update_info_wrapper(self.fetch_balances, self.format_balances, "üí∞ Total Balance:")))
        self.dp.add_handler(CommandHandler("display_orders", self.display_orders))
        self.dp.add_handler(CommandHandler("info", self.info))

    def start(self, update, context):
        update.message.reply_text("Welcome to your Binance bot! Please select an option:")


    def update_info_wrapper(self, fetch_function, format_function, message_template):
        def update_info_content(update, context):
            chat_id = update.message.chat_id
            message_id = None
            while True:
                info_data = fetch_function()
                formatted_message = format_function(info_data)
                if message_id is None:
                    message_content = f"{message_template}\n{formatted_message}"
                    message = context.bot.send_message(chat_id=chat_id, text=message_content)
                    message_id = message.message_id
                else:
                    message_content = f"{message_template}\n{formatted_message}"
                    context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=message_content)
                time.sleep(5)
        return update_info_content

    def fetch_positions(self):
        positions = self.client.futures_position_information()
        return [position for position in positions if float(position['positionAmt']) != 0.0]

    def fetch_balances(self):
        account_info = self.client.futures_account()
        return account_info['assets'], float(account_info["totalUnrealizedProfit"])

    def format_positions(self, positions):
        formatted_messages = []
        formatted_message = "üìä Open Positions:\n"
        
        for position in positions:
            shape = "üü¢" if position['positionSide'] == "LONG" else "üî¥"
            entry = f"{shape} {position['symbol']} {position['leverage']}‚úñÔ∏è  Notional Size: {position['positionAmt']}\n"
            entry += f"üìå Entry Price: {float(position['entryPrice']):.4f} \n üíπMark Price: {float(position['markPrice']):.4f}\n"
            entry += f"üìà PNL: {float(position['unRealizedProfit']):.4f}\n"

            if len(formatted_message) + len(entry) <= telegram.constants.MAX_MESSAGE_LENGTH:
                formatted_message += entry
            else:
                formatted_messages.append(formatted_message)
                formatted_message = "üìä Open Positions:\n" + entry
                
        formatted_messages.append(formatted_message)
        return formatted_messages

    def format_pnl_message(self, positions):
        pnl_message = "Unrealized PnL and ROE% for each position:\n\n"
        small_random_number = random.uniform(1, 10)
        
        for position in positions:
            symbol = position['symbol']
            unrealized_pnl = float(position['unRealizedProfit'])
            entry_price = float(position['entryPrice'])
            mark_price = float(position['markPrice'])
            position_size = float(position['positionAmt'])
            leverage = float(position['leverage'])
            
            if entry_price != 0:
                roe = (((mark_price - entry_price) / entry_price) * 100) * leverage
                pnl_message += f"Symbol: {symbol}\n"
                pnl_message += f"Unrealized PnL: {unrealized_pnl:.4f}\n"
                pnl_message += f"ROE%: {roe:.4f}%\n"
                pnl_message += f"Mark Price: {mark_price:.4f}\n"
                pnl_message += f"Timestamp: {int(time.time())}{small_random_number:.1f}\n\n"
        
        return pnl_message

    def format_balances(self, balances, unrealized_pnl):
        total_balance = sum(float(balance['walletBalance']) for balance in balances) + unrealized_pnl
        message = f"üí∞ Total Balance: üí≤{total_balance}\n\nüìà Asset Balances:\n"
        message += f"ü§ë Unrealized PnL: üí≤{unrealized_pnl:.4f}\n"
        
        for balance in balances:
            if float(balance['walletBalance']) > 0.0:
                message += f"üí≥ {balance['asset']}: üí≤{float(balance['walletBalance']):.4f}\n"
                
        return message

    
    #

    def display_orders(self, update, context):
        chat_id = update.message.chat_id
        try:
            orders = self.client.futures_get_open_orders()
            if not orders:
                context.bot.send_message(chat_id=chat_id, text="No open orders found.")
                return
            orders_text = "Open orders:\n"
            for order in orders:
                orders_text += f"Symbol: {order['symbol']}, Side: {order['side']}, Quantity: {order['origQty']}, Price: {order['price']}\n"
            context.bot.send_message(chat_id=chat_id, text=orders_text)
        except Exception as e:
            context.bot.send_message(chat_id=chat_id, text=f"An error occurred: {e}")

    def run(self):
        self.updater.start_polling()
        self.updater.idle()

if __name__ == "__main__":
    bot = BinanceBot()
    bot.run()